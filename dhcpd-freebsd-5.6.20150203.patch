diff -rupN /home/koue/tmp/dhcpd/Makefile dhcpd/Makefile
--- /home/koue/tmp/dhcpd/Makefile	2015-02-05 16:02:55.000000000 +0200
+++ dhcpd/Makefile	2015-02-05 14:52:47.000000000 +0200
@@ -5,11 +5,11 @@
 SRCS=	bootp.c confpars.c db.c dhcp.c dhcpd.c bpf.c packet.c errwarn.c \
 	dispatch.c print.c memory.c options.c inet.c conflex.c parse.c \
 	alloc.c tables.c tree.c hash.c convert.c icmp.c pfutils.c sync.c \
-	udpsock.c
+	udpsock.c reallocarray.c
 PROG=	dhcpd
 MAN=	dhcpd.8 dhcpd.conf.5 dhcpd.leases.5 dhcp-options.5
 
-LDADD+=-lcrypto
-CFLAGS+=-Wall
+LDADD+=-lcrypto -lmd
+CFLAGS+=-Wall -D__dead=''
 
 .include <bsd.prog.mk>
diff -rupN /home/koue/tmp/dhcpd/bpf.c dhcpd/bpf.c
--- /home/koue/tmp/dhcpd/bpf.c	2015-02-05 16:02:55.000000000 +0200
+++ dhcpd/bpf.c	2015-02-05 14:52:47.000000000 +0200
@@ -194,8 +194,10 @@ if_register_receive(struct interface_inf
 	if (ioctl(info->rfdesc, BIOCIMMEDIATE, &flag) == -1)
 		error("Can't set immediate mode on bpf device: %m");
 
+#ifndef __FreeBSD__
 	if (ioctl(info->rfdesc, BIOCSFILDROP, &flag) == -1)
 		error("Can't set filter-drop mode on bpf device: %m");
+#endif
 
 	/* make sure kernel fills in the source ethernet address */
 	if (ioctl(info->rfdesc, BIOCSHDRCMPLT, &cmplt) == -1)
diff -rupN /home/koue/tmp/dhcpd/dhcpd.c dhcpd/dhcpd.c
--- /home/koue/tmp/dhcpd/dhcpd.c	2015-02-05 16:02:55.000000000 +0200
+++ dhcpd/dhcpd.c	2015-02-05 14:52:47.000000000 +0200
@@ -66,7 +66,9 @@ char *path_dhcpd_db = _PATH_DHCPD_DB;
 char *abandoned_tab = NULL;
 char *changedmac_tab = NULL;
 char *leased_tab = NULL;
-struct syslog_data sdata = SYSLOG_DATA_INIT;
+#ifndef __FreeBSD__
+	struct syslog_data sdata = SYSLOG_DATA_INIT;
+#endif
 
 int
 main(int argc, char *argv[])
@@ -80,7 +82,9 @@ main(int argc, char *argv[])
 	struct in_addr udpaddr;
 
 	/* Initially, log errors to stderr as well as to syslogd. */
+#ifndef __FreeBSD__
 	openlog_r(__progname, LOG_PID | LOG_NDELAY, DHCPD_LOG_FACILITY, &sdata);
+#endif
 
 	opterr = 0;
 	while ((ch = getopt(argc, argv, "A:C:L:c:dfl:nu::Y:y:")) != -1)
@@ -182,11 +186,14 @@ main(int argc, char *argv[])
 	db_startup();
 	if (!udpsockmode || argc > 0)
 		discover_interfaces(&rdomain);
-
 	if (rdomain != -1)
+#ifdef __FreeBSD__
+		if (setfib(rdomain) == -1)
+			error("setfib (%m)");
+#else
 		if (setrtable(rdomain) == -1)
 			error("setrtable (%m)");
-
+#endif
 	if (udpsockmode)
 		udpsock_startup(udpaddr);
 	icmp_startup(1, lease_pinged);
@@ -216,7 +223,7 @@ main(int argc, char *argv[])
 			exit(1);
 		case 0:
 			/* child process. start up table engine */
-			pftable_handler();
+			pftable_handler(); 
 			/* NOTREACHED */
 			exit(1);
 		default:
@@ -224,9 +231,13 @@ main(int argc, char *argv[])
 			break;
 		}
 	}
-
+#ifdef __FreeBSD__
+	if (chroot("/var/empty") == -1)
+		error("chroot %s: %m", "/var/empty");
+#else
 	if (chroot(_PATH_VAREMPTY) == -1)
 		error("chroot %s: %m", _PATH_VAREMPTY);
+#endif
 	if (chdir("/") == -1)
 		error("chdir(\"/\"): %m");
 	if (setgroups(1, &pw->pw_gid) ||
diff -rupN /home/koue/tmp/dhcpd/dispatch.c dhcpd/dispatch.c
--- /home/koue/tmp/dhcpd/dispatch.c	2015-02-05 16:02:55.000000000 +0200
+++ dhcpd/dispatch.c	2015-02-05 14:52:47.000000000 +0200
@@ -45,6 +45,8 @@
 #include <poll.h>
 #include <net/if_media.h>
 
+#include "reallocarray.h"
+
 extern int syncfd;
 
 struct interface_info *interfaces;
@@ -633,9 +635,13 @@ get_rdomain(char *name)
 
 	bzero(&ifr, sizeof(ifr));
 	strlcpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
+#ifdef __FreeBSD__
+	if (ioctl(s, SIOCGIFFIB, (caddr_t)&ifr) != -1)
+		rv = ifr.ifr_fib;
+#else
 	if (ioctl(s, SIOCGIFRDOMAIN, (caddr_t)&ifr) != -1)
 		rv = ifr.ifr_rdomainid;
-
+#endif
 	close(s);
 	return rv;
 }
diff -rupN /home/koue/tmp/dhcpd/errwarn.c dhcpd/errwarn.c
--- /home/koue/tmp/dhcpd/errwarn.c	2015-02-05 16:02:55.000000000 +0200
+++ dhcpd/errwarn.c	2015-02-05 14:52:47.000000000 +0200
@@ -73,13 +73,21 @@ error(char *fmt, ...)
 		write(STDERR_FILENO, mbuf, strlen(mbuf));
 		write(STDERR_FILENO, "\n", 1);
 	} else
+#ifdef __FreeBSD__
+		syslog(log_priority | LOG_ERR, "%s", mbuf);
+#else
 		syslog_r(log_priority | LOG_ERR, &sdata, "%s", mbuf);
+#endif
 
 	if (log_perror) {
 		fprintf(stderr, "exiting.\n");
 		fflush(stderr);
 	} else
+#ifdef __FreeBSD__
+		syslog(LOG_CRIT, "exiting.");
+#else
 		syslog_r(LOG_CRIT, &sdata, "exiting.");
+#endif
 
 	exit(1);
 }
@@ -102,7 +110,11 @@ warning(char *fmt, ...)
 		write(STDERR_FILENO, mbuf, strlen(mbuf));
 		write(STDERR_FILENO, "\n", 1);
 	} else
+#ifdef __FreeBSD__
+		syslog(log_priority | LOG_ERR, "%s", mbuf);
+#else
 		syslog_r(log_priority | LOG_ERR, &sdata, "%s", mbuf);
+#endif
 
 	return (0);
 }
@@ -125,7 +137,11 @@ note(char *fmt, ...)
 		write(STDERR_FILENO, mbuf, strlen(mbuf));
 		write(STDERR_FILENO, "\n", 1);
 	} else
+#ifdef __FreeBSD__
+		syslog(log_priority | LOG_INFO, "%s", mbuf);
+#else
 		syslog_r(log_priority | LOG_INFO, &sdata, "%s", mbuf);
+#endif
 
 	return (0);
 }
@@ -148,7 +164,11 @@ debug(char *fmt, ...)
 		write(STDERR_FILENO, mbuf, strlen(mbuf));
 		write(STDERR_FILENO, "\n", 1);
 	} else
+#ifdef __FreeBSD__
+		syslog(log_priority | LOG_DEBUG, "%s", mbuf);
+#else
 		syslog_r(log_priority | LOG_DEBUG, &sdata, "%s", mbuf);
+#endif
 
 	return (0);
 }
@@ -226,11 +246,20 @@ parse_warn(char *fmt, ...)
 		}
 		writev(STDERR_FILENO, iov, iovcnt);
 	} else {
+#ifdef __FreeBSD__
+		syslog(log_priority | LOG_ERR, "%s", mbuf);
+		syslog(log_priority | LOG_ERR, "%s", token_line);
+#else
 		syslog_r(log_priority | LOG_ERR, &sdata, "%s", mbuf);
 		syslog_r(log_priority | LOG_ERR, &sdata, "%s", token_line);
+#endif
 		if (lexchar < 81)
+#ifdef __FreeBSD__
+			syslog(log_priority | LOG_ERR, "%*c", lexchar, '^');
+#else
 			syslog_r(log_priority | LOG_ERR, &sdata, "%*c", lexchar,
 			    '^');
+#endif
 	}
 
 	warnings_occurred = 1;
diff -rupN /home/koue/tmp/dhcpd/pfutils.c dhcpd/pfutils.c
--- /home/koue/tmp/dhcpd/pfutils.c	2015-02-05 16:02:55.000000000 +0200
+++ dhcpd/pfutils.c	2015-02-05 14:52:47.000000000 +0200
@@ -54,8 +54,13 @@ pftable_handler()
 
 	if ((fd = open(_PATH_DEV_PF, O_RDWR|O_NOFOLLOW, 0660)) == -1)
 		error("can't open pf device: %m");
-	if (chroot(_PATH_VAREMPTY) == -1)
+#ifdef __FreeBSD__
+	if (chroot("/var/empty") == -1)
+		error("chroot %s: %m", "/var/empty");
+#else
+	 if (chroot(_PATH_VAREMPTY) == -1)
 		error("chroot %s: %m", _PATH_VAREMPTY);
+#endif
 	if (chdir("/") == -1)
 		error("chdir(\"/\"): %m");
 	if (setgroups(1, &pw->pw_gid) ||
diff -rupN /home/koue/tmp/dhcpd/reallocarray.c dhcpd/reallocarray.c
--- /home/koue/tmp/dhcpd/reallocarray.c	1970-01-01 02:00:00.000000000 +0200
+++ dhcpd/reallocarray.c	2015-02-05 14:52:47.000000000 +0200
@@ -0,0 +1,38 @@
+/*	$OpenBSD: reallocarray.c,v 1.1 2014/05/08 21:43:49 deraadt Exp $	*/
+/*
+ * Copyright (c) 2008 Otto Moerbeek <otto@drijf.net>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <sys/types.h>
+#include <errno.h>
+#include <stdint.h>
+#include <stdlib.h>
+
+/*
+ * This is sqrt(SIZE_MAX+1), as s1*s2 <= SIZE_MAX
+ * if both s1 < MUL_NO_OVERFLOW and s2 < MUL_NO_OVERFLOW
+ */
+#define MUL_NO_OVERFLOW	((size_t)1 << (sizeof(size_t) * 4))
+
+void *
+reallocarray(void *optr, size_t nmemb, size_t size)
+{
+	if ((nmemb >= MUL_NO_OVERFLOW || size >= MUL_NO_OVERFLOW) &&
+	    nmemb > 0 && SIZE_MAX / nmemb < size) {
+		errno = ENOMEM;
+		return NULL;
+	}
+	return realloc(optr, size * nmemb);
+}
diff -rupN /home/koue/tmp/dhcpd/reallocarray.h dhcpd/reallocarray.h
--- /home/koue/tmp/dhcpd/reallocarray.h	1970-01-01 02:00:00.000000000 +0200
+++ dhcpd/reallocarray.h	2015-02-05 14:52:47.000000000 +0200
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2015 Nikola Kolev
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *    - Redistributions of source code must retain the above copyright
+ *      notice, this list of conditions and the following disclaimer.
+ *    - Redistributions in binary form must reproduce the above
+ *      copyright notice, this list of conditions and the following
+ *      disclaimer in the documentation and/or other materials provided
+ *      with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#ifndef _REALLOCARRAY_H_
+#define _REALLOCARRAY_H_
+
+void *reallocarray(void *, size_t, size_t);
+
+#endif
diff -rupN /home/koue/tmp/dhcpd/sync.c dhcpd/sync.c
--- /home/koue/tmp/dhcpd/sync.c	2015-02-05 16:02:55.000000000 +0200
+++ dhcpd/sync.c	2015-02-05 14:52:47.000000000 +0200
@@ -38,7 +38,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
-#include <sha1.h>
+#include <sha.h>
 
 #include <netdb.h>
 
@@ -144,7 +144,7 @@ sync_init(const char *iface, const char 
 		}
 	}
 
-	sync_key = SHA1File(DHCP_SYNC_KEY, NULL);
+	sync_key = SHA1_File(DHCP_SYNC_KEY, NULL);
 	if (sync_key == NULL) {
 		if (errno != ENOENT) {
 			fprintf(stderr, "failed to open sync key: %s\n",
@@ -224,10 +224,17 @@ sync_init(const char *iface, const char 
 	}
 
 	if (sync_debug)
+#ifdef __FreeBSD__
+		syslog(LOG_DEBUG, "using multicast dhcp sync %smode "
+			"(ttl %u, group %s, port %d)\n",
+			sendmcast ? "" : "receive ",
+			ttl, inet_ntoa(sync_out.sin_addr), port);
+#else
 		syslog_r(LOG_DEBUG, &sdata, "using multicast dhcp sync %smode "
 		    "(ttl %u, group %s, port %d)\n",
 		    sendmcast ? "" : "receive ",
 		    ttl, inet_ntoa(sync_out.sin_addr), port);
+#endif
 
 	return (syncfd);
 
